folk.mal1 <- clv.Folkes.Mallows(std)
phi1 <- clv.Phi(std)
?clv.Phi
clv.Russel.Rao(std)
russ.rao1 <- clv.Russel.Rao(std)
library(data.table)
library(SummarizedExperiment)
library(plyranges)
library(clv)
library(ggplot2)
library(mclust)
library(aricode)
L <- readLines("/Users/akshaya/Work/atacCNV/karyotype HCT116/Browser_files_curated_samples_Standard/Browser_files_Edivisive_ccc_95_rbc_5/HCT116_WT_T0_2N_binsize_1e+06_stepsize_5e+05_refined_curated_CNV.bed")
isHdr <- grepl("track", L)
grp <- L[isHdr][cumsum(isHdr)]
Read <- function(x) read.table(text = x, sep = "\t", header = FALSE)
hct_cells_truth <- Map(Read, split(L[!isHdr], grp[!isHdr]))
grep(pattern = "UB.*.bam", names(hct_cells_truth), value=TRUE)
library(stringr)
names(hct_cells_truth) <- str_match(names(hct_cells_truth), "UB200617_4_[0-9]+.bam")
hct_cells_truth <- lapply(hct_cells_truth, function(x){
x <- x[,1:4]
colnames(x) <- c('seqnames','start','end','somy')
return(x)
})
# This is the list of start and stop for the 16 cells.
# I need to expand it for every genomic bin
# Will use these results for computing
outdir <- "/Users/akshaya/Work/atacCNV/workspace/ad_bam/03052021/HCT116"
counts <- readRDS(file.path(outdir,"count_summary.rds"))
# This is the list of start and stop for the 16 cells.
# I need to expand it for every genomic bin
# Will use these results for computing
outdir <- "/Users/akshaya/Work/atacCNV/workspace/ad_bam/03052021/HCT116/"
counts
counts <- readRDS(file.path(outdir,"count_summary.rds"))
corrected_counts <- readRDS(file.path(outdir,"counts_gc_corrected.rds"))
clusters_ad <- readRDS(file.path(outdir,"results_gc_corrected.rds"))
rowinfo <- as.data.table(rowRanges(counts))
peaks <- cbind(rowinfo, corrected_counts)
bininfo <- as.data.table(rowRanges(counts))
bininfo <- as_granges(bininfo[,1:3])
hct_cells_truth <- lapply(hct_cells_truth, as_granges)
hct_cells_truth <- lapply(hct_cells_truth, function(x){
merged <- mergeByOverlaps(bininfo, x)
merged <- merged[c("bininfo","somy")]
merged <- as.data.frame(merged[!duplicated(merged$bininfo),])
merged$bininfo.width <- NULL
merged$bininfo.strand <- NULL
return(merged)
})
hct_cells_truth <- mapply(function(df, name){
colnames(df) <- c("seqnames","start","end",name)
return(df)
}, df=hct_cells_truth, name=names(hct_cells_truth), SIMPLIFY = FALSE)
hct_cells_truth <- as.data.table(Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = c("seqnames", "start", "end"), all.x = TRUE),
hct_cells_truth))
hct_cells_truth$frequent <- apply(hct_cells_truth[, .SD, .SDcols=patterns("UB200617")], 1,
function(x) names(which.max(table(x))))
hct_cells_truth.gr <- sort(as_granges(hct_cells_truth))
#### Go from clusters_ad to somies.dt
breakpoints <- lapply(clusters_ad, function(x) { lapply(x,'[[', 1) })
distances <- lapply(clusters_ad, function(x) { lapply(x,'[[', 2) })
names_seq <- levels(peaks$seqnames)
result.dt <- Map(function(bp, dist){
names(bp) <- names_seq
names(dist) <- names_seq
dtlist <- Map(function(per_chr_bp, per_chr_dist){
data.table(per_chr_bp, per_chr_dist)
}, bp, dist)
per_cell_dt <- rbindlist(dtlist, idcol = 'Chr')
per_cell_dt <- per_cell_dt[order(-per_chr_dist)]
}, breakpoints, distances)
pruned_result.dt <- lapply(result.dt, function(x){
threshold_dist_values(x)
})
library(atacCNV)
pruned_result.dt <- lapply(result.dt, function(x){
threshold_dist_values(x)
})
library(devtools)
load_all()
pruned_result.dt <- lapply(result.dt, function(x){
threshold_dist_values(x)
})
clusters_pruned <- as.data.table(Map(function(seq_data, bp){
per_chrom_seq_data <- split(seq_data, peaks$seqnames)
per_chrom_bp <- split(bp, bp$Chr)
clusters_per_chrom <- Map(function(seq_data2, bp2){
if(is.null(bp2)){
return(rep(1, length(seq_data2)))
} else {
bp_to_cluster <- sort(c(1,length(seq_data2)+1,bp2$per_chr_bp))
return(rep(1:length(diff(bp_to_cluster)),diff(bp_to_cluster)))
}
}, per_chrom_seq_data[names_seq], per_chrom_bp[names_seq])
cl <- 0
clusters <- vector()
for(item in clusters_per_chrom){
item <- item + cl
clusters <- append(clusters, item)
cl <- cl + length(unique(item))
}
return(clusters)
},  peaks[, .SD, .SDcols = patterns("cell-")], pruned_result.dt))
somies_ad <- Map(function(seq_data,cluster) {
assign_gainloss(seq_data, cluster, uq=0.9, lq=0.1)
}, peaks[, .SD, .SDcols = patterns("cell-")], clusters_pruned)
somies.dt <- as.data.table(somies_ad)
somies.dt <- somies.dt+1
somies.dt <- as.data.table(lapply(somies.dt, function(x){as.factor(paste0(x,"-somy"))}))
somies.dt <- cbind(rowinfo, somies.dt)
hct_cells_truth$frequent <- as.factor(hct_cells_truth$frequent)
for_indexing <- merge(somies.dt, hct_cells_truth[,c("seqnames","start","end","frequent")])
# Metadata
metadata <- read.table("/Users/akshaya/Work/atacCNV/scCAT/metadata.tsv", header = TRUE)
metadata$barcode <- paste0("cell-", metadata$barcode, ".bam")
metadata$chr8[metadata$chr8=="Mixed"] <- "Gain"
metadata$chr8 <- droplevels(metadata$chr8)
metadata$chr10[metadata$chr10=="Mixed"] <- "Gain"
metadata$chr10 <- droplevels(metadata$chr10)
metadata$gain8_10 <- ifelse(metadata$chr8=="Neutral" & metadata$chr10=="Neutral", "NoGain", "Gain")
metrics <- for_indexing[, lapply(.SD, function(x){
std <- std.ext(as.integer(for_indexing$frequent), as.integer(x))
rand1 <- clv.Rand(std)
jaccard1 <- clv.Jaccard(std)
folk.mal1 <- clv.Folkes.Mallows(std)
russ.rao1 <- clv.Russel.Rao(std)
# named_vec <- data.frame(cbind(rand1, jaccard1, folk.mal1, russ.rao1))
# colnames(named_vec) <- c("rand","jaccard","folkes.mallows","russel.rao")
ari1 <- adjustedRandIndex(for_indexing$frequent, x)
ami1 <- AMI(for_indexing$frequent, x)
nid1 <- NID(for_indexing$frequent, x)
nmi1 <- NMI(for_indexing$frequent, x)
named_vec <- c(rand=rand1, jaccard=jaccard1, folkes.mallows=folk.mal1, russel.rao=russ.rao1,
ari=ari1, ami=ami1, nid=nid1, nmi=nmi1)
return(named_vec)
}), .SDcols=patterns("cell-")]
#### Get metrics to be named in the lappy ### TO-DO
cellnames <- colnames(metrics)
metrics <- transpose(metrics)
colnames(metrics) <- c("rand","jaccard","folkes.mallows","russel.rao",
"ARI", "AMI", "NID", "NMI")
metrics$barcode <- cellnames
metrics <- merge(metrics, metadata)
metrics_melted <- melt.data.table(metrics, id.vars = c("barcode", "total", "chr8", "chr10", "gain8_10"))
ggplot(metrics_melted, aes(x=barcode, y=value)) + geom_point(aes(color=gain8_10)) +
facet_wrap(vars(variable), nrow=2) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
View(metrics)
sum(metrics$ARI)
outdir <- "/Users/akshaya/Work/atacCNV/workspace/ad_bam/03052021/nopeakHCT/"
counts <- readRDS(file.path(outdir,"count_summary.rds"))
corrected_counts <- readRDS(file.path(outdir,"counts_gc_corrected.rds"))
clusters_ad <- readRDS(file.path(outdir,"results_gc_corrected.rds"))
rowinfo <- as.data.table(rowRanges(counts))
peaks <- cbind(rowinfo, corrected_counts)
bininfo <- as.data.table(rowRanges(counts))
bininfo <- as_granges(bininfo[,1:3])
hct_cells_truth <- lapply(hct_cells_truth, as_granges)
hct_cells_truth <- lapply(hct_cells_truth, function(x){
merged <- mergeByOverlaps(bininfo, x)
merged <- merged[c("bininfo","somy")]
merged <- as.data.frame(merged[!duplicated(merged$bininfo),])
merged$bininfo.width <- NULL
merged$bininfo.strand <- NULL
return(merged)
})
hct_cells_truth <- mapply(function(df, name){
colnames(df) <- c("seqnames","start","end",name)
return(df)
}, df=hct_cells_truth, name=names(hct_cells_truth), SIMPLIFY = FALSE)
function (classes, fdef, mtable)
L <- readLines("/Users/akshaya/Work/atacCNV/karyotype HCT116/Browser_files_curated_samples_Standard/Browser_files_Edivisive_ccc_95_rbc_5/HCT116_WT_T0_2N_binsize_1e+06_stepsize_5e+05_refined_curated_CNV.bed")
isHdr <- grepl("track", L)
grp <- L[isHdr][cumsum(isHdr)]
Read <- function(x) read.table(text = x, sep = "\t", header = FALSE)
L <- readLines("/Users/akshaya/Work/atacCNV/karyotype HCT116/Browser_files_curated_samples_Standard/Browser_files_Edivisive_ccc_95_rbc_5/HCT116_WT_T0_2N_binsize_1e+06_stepsize_5e+05_refined_curated_CNV.bed")
isHdr <- grepl("track", L)
grp <- L[isHdr][cumsum(isHdr)]
Read <- function(x) read.table(text = x, sep = "\t", header = FALSE)
hct_cells_truth <- Map(Read, split(L[!isHdr], grp[!isHdr]))
grep(pattern = "UB.*.bam", names(hct_cells_truth), value=TRUE)
library(stringr)
names(hct_cells_truth) <- str_match(names(hct_cells_truth), "UB200617_4_[0-9]+.bam")
hct_cells_truth <- lapply(hct_cells_truth, function(x){
x <- x[,1:4]
colnames(x) <- c('seqnames','start','end','somy')
return(x)
})
# This is the list of start and stop for the 16 cells.
# I need to expand it for every genomic bin
# Will use these results for computing
outdir <- "/Users/akshaya/Work/atacCNV/workspace/ad_bam/03052021/HCT116/"
outdir <- "/Users/akshaya/Work/atacCNV/workspace/ad_bam/03052021/nopeakHCT/"
counts <- readRDS(file.path(outdir,"count_summary.rds"))
corrected_counts <- readRDS(file.path(outdir,"counts_gc_corrected.rds"))
clusters_ad <- readRDS(file.path(outdir,"results_gc_corrected.rds"))
rowinfo <- as.data.table(rowRanges(counts))
peaks <- cbind(rowinfo, corrected_counts)
bininfo <- as.data.table(rowRanges(counts))
bininfo <- as_granges(bininfo[,1:3])
hct_cells_truth <- lapply(hct_cells_truth, as_granges)
hct_cells_truth <- lapply(hct_cells_truth, function(x){
merged <- mergeByOverlaps(bininfo, x)
merged <- merged[c("bininfo","somy")]
merged <- as.data.frame(merged[!duplicated(merged$bininfo),])
merged$bininfo.width <- NULL
merged$bininfo.strand <- NULL
return(merged)
})
hct_cells_truth <- mapply(function(df, name){
colnames(df) <- c("seqnames","start","end",name)
return(df)
}, df=hct_cells_truth, name=names(hct_cells_truth), SIMPLIFY = FALSE)
hct_cells_truth <- as.data.table(Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = c("seqnames", "start", "end"), all.x = TRUE),
hct_cells_truth))
hct_cells_truth$frequent <- apply(hct_cells_truth[, .SD, .SDcols=patterns("UB200617")], 1,
function(x) names(which.max(table(x))))
hct_cells_truth.gr <- sort(as_granges(hct_cells_truth))
#### Go from clusters_ad to somies.dt
breakpoints <- lapply(clusters_ad, function(x) { lapply(x,'[[', 1) })
distances <- lapply(clusters_ad, function(x) { lapply(x,'[[', 2) })
names_seq <- levels(peaks$seqnames)
result.dt <- Map(function(bp, dist){
names(bp) <- names_seq
names(dist) <- names_seq
dtlist <- Map(function(per_chr_bp, per_chr_dist){
data.table(per_chr_bp, per_chr_dist)
}, bp, dist)
per_cell_dt <- rbindlist(dtlist, idcol = 'Chr')
per_cell_dt <- per_cell_dt[order(-per_chr_dist)]
}, breakpoints, distances)
pruned_result.dt <- lapply(result.dt, function(x){
threshold_dist_values(x)
})
clusters_pruned <- as.data.table(Map(function(seq_data, bp){
per_chrom_seq_data <- split(seq_data, peaks$seqnames)
per_chrom_bp <- split(bp, bp$Chr)
clusters_per_chrom <- Map(function(seq_data2, bp2){
if(is.null(bp2)){
return(rep(1, length(seq_data2)))
} else {
bp_to_cluster <- sort(c(1,length(seq_data2)+1,bp2$per_chr_bp))
return(rep(1:length(diff(bp_to_cluster)),diff(bp_to_cluster)))
}
}, per_chrom_seq_data[names_seq], per_chrom_bp[names_seq])
cl <- 0
clusters <- vector()
for(item in clusters_per_chrom){
item <- item + cl
clusters <- append(clusters, item)
cl <- cl + length(unique(item))
}
return(clusters)
},  peaks[, .SD, .SDcols = patterns("cell-")], pruned_result.dt))
somies_ad <- Map(function(seq_data,cluster) {
assign_gainloss(seq_data, cluster, uq=0.9, lq=0.1)
}, peaks[, .SD, .SDcols = patterns("cell-")], clusters_pruned)
somies.dt <- as.data.table(somies_ad)
somies.dt <- somies.dt+1
somies.dt <- as.data.table(lapply(somies.dt, function(x){as.factor(paste0(x,"-somy"))}))
somies.dt <- cbind(rowinfo, somies.dt)
hct_cells_truth$frequent <- as.factor(hct_cells_truth$frequent)
for_indexing <- merge(somies.dt, hct_cells_truth[,c("seqnames","start","end","frequent")])
# Metadata
metadata <- read.table("/Users/akshaya/Work/atacCNV/scCAT/metadata.tsv", header = TRUE)
metadata$barcode <- paste0("cell-", metadata$barcode, ".bam")
metadata$chr8[metadata$chr8=="Mixed"] <- "Gain"
metadata$chr8 <- droplevels(metadata$chr8)
metadata$chr10[metadata$chr10=="Mixed"] <- "Gain"
metadata$chr10 <- droplevels(metadata$chr10)
metadata$gain8_10 <- ifelse(metadata$chr8=="Neutral" & metadata$chr10=="Neutral", "NoGain", "Gain")
metrics <- for_indexing[, lapply(.SD, function(x){
std <- std.ext(as.integer(for_indexing$frequent), as.integer(x))
rand1 <- clv.Rand(std)
jaccard1 <- clv.Jaccard(std)
folk.mal1 <- clv.Folkes.Mallows(std)
russ.rao1 <- clv.Russel.Rao(std)
# named_vec <- data.frame(cbind(rand1, jaccard1, folk.mal1, russ.rao1))
# colnames(named_vec) <- c("rand","jaccard","folkes.mallows","russel.rao")
ari1 <- adjustedRandIndex(for_indexing$frequent, x)
ami1 <- AMI(for_indexing$frequent, x)
nid1 <- NID(for_indexing$frequent, x)
nmi1 <- NMI(for_indexing$frequent, x)
named_vec <- c(rand=rand1, jaccard=jaccard1, folkes.mallows=folk.mal1, russel.rao=russ.rao1,
ari=ari1, ami=ami1, nid=nid1, nmi=nmi1)
return(named_vec)
}), .SDcols=patterns("cell-")]
#### Get metrics to be named in the lappy ### TO-DO
cellnames <- colnames(metrics)
metrics <- transpose(metrics)
colnames(metrics) <- c("rand","jaccard","folkes.mallows","russel.rao",
"ARI", "AMI", "NID", "NMI")
metrics$barcode <- cellnames
metrics <- merge(metrics, metadata)
metrics_melted <- melt.data.table(metrics, id.vars = c("barcode", "total", "chr8", "chr10", "gain8_10"))
ggplot(metrics_melted, aes(x=barcode, y=value)) + geom_point(aes(color=gain8_10)) +
facet_wrap(vars(variable), nrow=2) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
sum(metrics$ARI)
View(metrics)
### Temp plotting
peaks[peaks$seqnames=="chr8"]
### Temp plotting
peaks[peaks$seqnames=="chr8"]$cell-SRR8174083.bam
### Temp plotting
peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`
### Temp plotting
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`)
### Temp plotting
par(mfrow=c(3,1))
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`)
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`)
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`)
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`)
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`)
?plot
par(mfrow=c(5,1))
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="", ylab="", main="Chr 8")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`, xlab="", ylab="")
par(mfrow=c(5,1))
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="", ylab="", main="Chr 8")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`, xlab="", ylab="")
### Temp plotting
par(mfrow=c(3,1))
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="", ylab="", main="Chr 8")
#plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`, xlab="", ylab="")
# plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`, xlab="", ylab="")
# This is the list of start and stop for the 16 cells.
# I need to expand it for every genomic bin
# Will use these results for computing
outdir <- "/Users/akshaya/Work/atacCNV/workspace/ad_bam/03052021/HCT116/"
counts <- readRDS(file.path(outdir,"count_summary.rds"))
corrected_counts <- readRDS(file.path(outdir,"counts_gc_corrected.rds"))
clusters_ad <- readRDS(file.path(outdir,"results_gc_corrected.rds"))
rowinfo <- as.data.table(rowRanges(counts))
peaks <- cbind(rowinfo, corrected_counts)
### Temp plotting
par(mfrow=c(3,1))
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="", ylab="", main="Chr 8")
#plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`, xlab="", ylab="")
# plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`, xlab="", ylab="")
plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`, xlab="", ylab="")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="", ylab="", main="Chr 8")
### Temp plotting
par(mfrow=c(1,3))
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="", ylab="", main="Chr 8")
#plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`, xlab="", ylab="")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`, xlab="", ylab="")
# plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`, xlab="", ylab="")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`, xlab="", ylab="")
par(mfrow=c(1,3))
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="", ylab="", main="Chr 8")
#plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`, xlab="", ylab="", main="Chr 8")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`, xlab="", ylab="", main="Chr 8")
# plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`, xlab="", ylab="", main="Chr 8")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`, xlab="", ylab="", main="Chr 8")
outdir
L <- readLines("/Users/akshaya/Work/atacCNV/karyotype HCT116/Browser_files_curated_samples_Standard/Browser_files_Edivisive_ccc_95_rbc_5/HCT116_WT_T0_2N_binsize_1e+06_stepsize_5e+05_refined_curated_CNV.bed")
isHdr <- grepl("track", L)
outdir <- "/Users/akshaya/Work/atacCNV/workspace/ad_bam/03052021/nopeakHCT/"
counts <- readRDS(file.path(outdir,"count_summary.rds"))
corrected_counts <- readRDS(file.path(outdir,"counts_gc_corrected.rds"))
clusters_ad <- readRDS(file.path(outdir,"results_gc_corrected.rds"))
rowinfo <- as.data.table(rowRanges(counts))
peaks <- cbind(rowinfo, corrected_counts)
par(mfrow=c(1,3))
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="", ylab="", main="Chr 8")
#plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`, xlab="", ylab="", main="Chr 8")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`, xlab="", ylab="", main="Chr 8")
# plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`, xlab="", ylab="", main="Chr 8")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`, xlab="", ylab="", main="Chr 8")
peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`
length(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`)
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, main="Chr 8")
par(mfrow=c(1,3))
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174083.bam`, xlab="counts", ylab="", main="Chr 8")
#plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174178.bam`, xlab="", ylab="", main="Chr 8")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174207.bam`, xlab="counts", ylab="", main="Chr 8")
# plot(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174418.bam`, xlab="", ylab="", main="Chr 8")
hist(peaks[peaks$seqnames=="chr8"]$`cell-SRR8174334.bam`, xlab="counts", ylab="", main="Chr 8")
library(devtools)
load_all()
document()
outdir <- "/Users/akshaya/Work/atacCNV/snu601atac/"
somies_ad <- readRDS(file.path(outdir,"cnv_calls.rds"))
somies_ad$`cell-GCAGCTGGTTACTACG-1`
library(data.table)
somies_dt <- as.data.table(somies_ad)
somies_dt$`cell-GCAGCTGGTTACTACG-1`
counts <- readRDS(file.path(outdir,"count_summary.rds"))
peaks <- as.data.table(assays(counts)$counts)
colnames(peaks) <- paste0('cell-', colnames(peaks))
rowinfo <- as.data.table(rowRanges(counts))
peaks <- cbind(rowinfo, peaks)
corrected_counts <- readRDS(file.path(outdir,"counts_gc_corrected.rds"))
peaks <- cbind(rowinfo, corrected_counts)
zeroes_per_bin <- peaks[, rowSums(.SD==0), .SDcols = patterns("cell-")]
ncells <- length(grep("cell-", colnames(peaks)))
threshold_blacklist_bins <- 0.85
peaks <- peaks[zeroes_per_bin<(threshold_blacklist_bins*ncells)]
peaks[1:10,1:10]
somies.dt$seqnames <- peaks$seqnames
somies.dt <- as.data.table(somies_ad)
rm(somies_dt)
somies.dt$seqnames <- peaks$seqnames
somies.dt$rn <- as.numeric(rownames(somies.dt))
peaks[1:10,1:10]
somies.dt[1:10,1:10]
tail(colnames(somies.dt))
class(somies.dt$seqnames)
for (i1 in somies.dt$seqnames) {
}
i1
class(somies.dt)
chrom_somies.dt <- somies.dt[seqnames==i1]
chrom_somies.dt
dim(chrom_somies.dt)
rowSums(chrom_somies.dt)
rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")])
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
}
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")])))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
i1
i1 <- "chr4"
chrom_somies.dt <- somies.dt[seqnames==i1]
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")])))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
library(atacCNV)
dist_ad(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), k=10)
library(devtools)
load_all()
getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), k=10)
library(R.utils)
install.packages("R.utils")
library(R.utils)
load_all()
getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), k=10)
getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), k=3)
seg_points <- getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), minsize = 1, k=3)
seg_points$bp
abline(h=seg_points$bp)
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
abline(v=seg_points$bp)
length(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
length(seg_points$cluster)
seg_points <- getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), minsize = 1, k=3, test = 'KS')
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
abline(v=seg_points$bp)
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")])))
?diff
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=50))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=100))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), differences=100))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), differences=1000))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), differences=10))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
par(mfrow=c(2,1))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10), ylab="sum(somy)", xlab="Position in chr")
par(mfrow=c(2,1))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), ylab="sum(somy)", xlab="Position in chr")
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10), ylab="Lag 10 delta", xlab="Position in chr")
abline(h=100)
abline(h=c(100,-100))
abline(h=c(100,-100), col="red")
pdf(file = "/Users/akshaya/Work/atacCNV/snu601atac/segments_per_chrom.pdf", onefile = TRUE)
for (i1 in somies.dt$seqnames) {
par(mfrow=c(2,1))
chrom_somies.dt <- somies.dt[seqnames==i1]
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), ylab="sum(somy)", xlab="Position in chr")
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10), ylab="Lag 10 delta", xlab="Position in chr")
abline(h=c(100,-100), col="red")
# seg_points <- getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), minsize = 1, k=3)
# abline(v=seg_points$bp)
}
dev.off()
pdf(file = "/Users/akshaya/Work/atacCNV/snu601atac/segments_per_chrom.pdf", onefile = TRUE)
for (i1 in levels(somies.dt$seqnames)) {
par(mfrow=c(2,1))
chrom_somies.dt <- somies.dt[seqnames==i1]
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), ylab="sum(somy)", xlab="Position in chr")
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10), ylab="Lag 10 delta", xlab="Position in chr")
abline(h=c(100,-100), col="red")
# seg_points <- getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), minsize = 1, k=3)
# abline(v=seg_points$bp)
}
dev.off()
?dplyr::between
rowinfo
getwd()
devtools::load_all()
devtools::document()
getwd()
