plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")])))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
i1
i1 <- "chr4"
chrom_somies.dt <- somies.dt[seqnames==i1]
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")])))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
library(atacCNV)
dist_ad(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), k=10)
library(devtools)
load_all()
getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), k=10)
library(R.utils)
install.packages("R.utils")
library(R.utils)
load_all()
getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), k=10)
getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), k=3)
seg_points <- getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), minsize = 1, k=3)
seg_points$bp
abline(h=seg_points$bp)
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
abline(v=seg_points$bp)
length(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
length(seg_points$cluster)
seg_points <- getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), minsize = 1, k=3, test = 'KS')
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
abline(v=seg_points$bp)
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")])))
?diff
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=50))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=100))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), differences=100))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), differences=1000))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), differences=10))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
par(mfrow=c(2,1))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10))
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10), ylab="sum(somy)", xlab="Position in chr")
par(mfrow=c(2,1))
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), ylab="sum(somy)", xlab="Position in chr")
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10), ylab="Lag 10 delta", xlab="Position in chr")
abline(h=100)
abline(h=c(100,-100))
abline(h=c(100,-100), col="red")
pdf(file = "/Users/akshaya/Work/atacCNV/snu601atac/segments_per_chrom.pdf", onefile = TRUE)
for (i1 in somies.dt$seqnames) {
par(mfrow=c(2,1))
chrom_somies.dt <- somies.dt[seqnames==i1]
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), ylab="sum(somy)", xlab="Position in chr")
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10), ylab="Lag 10 delta", xlab="Position in chr")
abline(h=c(100,-100), col="red")
# seg_points <- getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), minsize = 1, k=3)
# abline(v=seg_points$bp)
}
dev.off()
pdf(file = "/Users/akshaya/Work/atacCNV/snu601atac/segments_per_chrom.pdf", onefile = TRUE)
for (i1 in levels(somies.dt$seqnames)) {
par(mfrow=c(2,1))
chrom_somies.dt <- somies.dt[seqnames==i1]
plot(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), ylab="sum(somy)", xlab="Position in chr")
plot(diff(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), lag=10), ylab="Lag 10 delta", xlab="Position in chr")
abline(h=c(100,-100), col="red")
# seg_points <- getbp(rowSums(chrom_somies.dt[, .SD, .SDcols = patterns("cell-")]), minsize = 1, k=3)
# abline(v=seg_points$bp)
}
dev.off()
?dplyr::between
rowinfo
getwd()
devtools::load_all()
devtools::document()
getwd()
?hclust
library(devtools)
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
library(devtools)
install_github("colomemaria/epiAneufinder")
library(devtools)
?epiAneufinder
??epiAneufinder
devtools::load_all()
devtools::document()
?epiAneufinder
?epiAneufinder
?epiAneufinder
devtools::load_all()
#Bed file with the blacklisted regions of the genome. This file is genome-version specific and it should be downloaded by the user
blacklist <- "/Users/akshaya/Work/hg38.blacklist.bed"
#Location of the input data. Can be a single fragments tsv file of a folder containing multiple bam files
input <- "/Users/akshaya/Desktop/epiAneu/sample.tsv.gz" #path to folder containing BAM files /or/ path+file_name for a TSV fragments file. If you want to test the package, sample data can be downloaded from the sample_data folder.
# Location of the output directory. If the directory does not exist it will be created
outdir <- "epiAneufinder_results"
#BSgenome to use for the analysis. The genome should be already installed in R. In this example we use the UCSC hg38 genome from Bioconductor
genome <- "BSgenome.Hsapiens.UCSC.hg38"
#Chromosomes to be excluded from the analysis. The chromosome names should follow the naming of the genome version used. In this example we have UCSC chromosome names
#Default is NULL
exclude <- c('chrX','chrY','chrM')
#Bed file with the blacklisted regions of the genome. This file is genome-version specific and it should be downloaded by the user
blacklist <- "/Users/akshaya/Work/hg38.blacklist.bed"
#Window size for partitioning the genome. Smaller window sizes will result in longer running times. Default is 1e5
windowSize <- 1e5
#Parameter to instruct epiAneufinder to resume from a previous run. Can be set to either True or False
#If certain parameters change, for example minsize, resuming may end in error messages. In such a case change the parameter to False
#Default in False
reuse.existing=TRUE
#Upper quantile thrshold. Default is 0.9
uq=0.9
#Lower quantile threshold. Default is at 0.1
lq=0.1
#Title for the karyotype plot. Default is NULL
title_karyo="Karyoplot"
#Number of cores to use for the analysis. Default is 4
ncores=4
#Minimum number of fragments for a cell to be included in the analysis. This parameter is only for fragnment files. Default is 20000
minFrags = 20000
#Threshold for filtering bins if the ratio of cells with zero reads is higher than the threshold. Setting it to 0 deactivates the filter. Default is 0.85
threshold_blacklist_bins=0.85
#Parameter on how many breakpoins to use for the CNV calculation. Default is 1, all breakpoints. If higher than one, the algorithm will calculate every n breakpoints
#Setting it to higher than 1 speeds the process with lower resolution as a result
minsize=5
#Number of segments per chromosomes (2^k). Default value is 3
k=3
dir.create(outdir)
epiAneufinder::epiAneufinder(input=input, outdir=outdir, blacklist=blacklist, windowSize=windowSize, genome=genome, exclude=exclude, reuse.existing=reuse.existing, uq=uq, lq=lq, title_karyo=title_karyo, readout=readout, gene.annotation=gene.annotation, ncores=ncores,test=test,minFrags=minFrags,minsize=minsize,k=k,threshold_blacklist_bins=threshold_blacklist_bins)
epiAneufinder::epiAneufinder(input=input, outdir=outdir, blacklist=blacklist, windowSize=windowSize, genome=genome, exclude=exclude, reuse.existing=reuse.existing, uq=uq, lq=lq, title_karyo=title_karyo, ncores=ncores,test=test,minFrags=minFrags,minsize=minsize,k=k,threshold_blacklist_bins=threshold_blacklist_bins)
fragmensts
fragments
file_fragments
#Location of the input data. Can be a single fragments tsv file of a folder containing multiple bam files
input <- "/Users/akshaya/Desktop/epiAneu/sample.tsv" #path to folder containing BAM files /or/ path+file_name for a TSV fragments file. If you want to test the package, sample data can be downloaded from the sample_data folder.
epiAneufinder::epiAneufinder(input=input, outdir=outdir, blacklist=blacklist, windowSize=windowSize, genome=genome, exclude=exclude, reuse.existing=reuse.existing, uq=uq, lq=lq, title_karyo=title_karyo, ncores=ncores,test=test,minFrags=minFrags,minsize=minsize,k=k,threshold_blacklist_bins=threshold_blacklist_bins)
#Location of the input data. Can be a single fragments tsv file of a folder containing multiple bam files
input <- "/Users/akshaya/Desktop/epiAneu/sample.tsv.gz" #path to folder containing BAM files /or/ path+file_name for a TSV fragments file. If you want to test the package, sample data can be downloaded from the sample_data folder.
# Location of the output directory. If the directory does not exist it will be created
outdir <- "epiAneufinder_results"
#Location of the input data. Can be a single fragments tsv file of a folder containing multiple bam files
input <- "/Users/akshaya/Desktop/epiAneu/sample.tsv.gz" #path to folder containing BAM files /or/ path+file_name for a TSV fragments file. If you want to test the package, sample data can be downloaded from the sample_data folder.
epiAneufinder::epiAneufinder(input=input, outdir=outdir, blacklist=blacklist, windowSize=windowSize, genome=genome, exclude=exclude, reuse.existing=reuse.existing, uq=uq, lq=lq, title_karyo=title_karyo, ncores=ncores,test=test,minFrags=minFrags,minsize=minsize,k=k,threshold_blacklist_bins=threshold_blacklist_bins)
getwd()
?mkdir
devtools::load_all()
#Number of cores to use for the analysis. Default is 4
ncores=4
source('~/Desktop/epiAneu/epiAneufinder_wrapper.R', echo=TRUE)
#Location of the input data. Can be a single fragments tsv file of a folder containing multiple bam files
input <- "/Users/akshaya/Desktop/epiAneu/sample.tsv" #path to folder containing BAM files /or/ path+file_name for a TSV fragments file. If you want to test the package, sample data can be downloaded from the sample_data folder.
# Location of the output directory. If the directory does not exist it will be created
outdir <- "epiAneufinder_results"
#BSgenome to use for the analysis. The genome should be already installed in R. In this example we use the UCSC hg38 genome from Bioconductor
genome <- "BSgenome.Hsapiens.UCSC.hg38"
#Chromosomes to be excluded from the analysis. The chromosome names should follow the naming of the genome version used. In this example we have UCSC chromosome names
#Default is NULL
exclude <- c('chrX','chrY','chrM')
#Bed file with the blacklisted regions of the genome. This file is genome-version specific and it should be downloaded by the user
blacklist <- "/Users/akshaya/Work/hg38.blacklist.bed"
#Window size for partitioning the genome. Smaller window sizes will result in longer running times. Default is 1e5
windowSize <- 1e5
#Parameter to instruct epiAneufinder to resume from a previous run. Can be set to either True or False
#If certain parameters change, for example minsize, resuming may end in error messages. In such a case change the parameter to False
#Default in False
reuse.existing=TRUE
#Upper quantile thrshold. Default is 0.9
uq=0.9
#Lower quantile threshold. Default is at 0.1
lq=0.1
#Title for the karyotype plot. Default is NULL
title_karyo="Karyoplot"
#Number of cores to use for the analysis. Default is 4
ncores=4
#Minimum number of fragments for a cell to be included in the analysis. This parameter is only for fragnment files. Default is 20000
minFrags = 20000
#Threshold for filtering bins if the ratio of cells with zero reads is higher than the threshold. Setting it to 0 deactivates the filter. Default is 0.85
threshold_blacklist_bins=0.85
#Parameter on how many breakpoins to use for the CNV calculation. Default is 1, all breakpoints. If higher than one, the algorithm will calculate every n breakpoints
#Setting it to higher than 1 speeds the process with lower resolution as a result
minsize=5
#Number of segments per chromosomes (2^k). Default value is 3
k=3
dir.create(outdir)
epiAneufinder::epiAneufinder(input=input, outdir=outdir, blacklist=blacklist, windowSize=windowSize, genome=genome, exclude=exclude, reuse.existing=reuse.existing, uq=uq, lq=lq, title_karyo=title_karyo, ncores=ncores,test=test,minFrags=minFrags,minsize=minsize,k=k,threshold_blacklist_bins=threshold_blacklist_bins)
load_all()
library(devtools)
load_all()
epiAneufinder::epiAneufinder(input=input, outdir=outdir, blacklist=blacklist, windowSize=windowSize, genome=genome, exclude=exclude, reuse.existing=reuse.existing, uq=uq, lq=lq, title_karyo=title_karyo, ncores=ncores,test=test,minFrags=minFrags,minsize=minsize,k=k,threshold_blacklist_bins=threshold_blacklist_bins)
clusters_ad
clusters_ad <- readRDS(file.path(outdir,"results_gc_corrected.rds"))
outdir
getwd()
outdir
outdir
list.files(epiAneufinder_results)
outdir <- file.path(outdir, "epiAneufinder_results")
outdir
list.files(outdir)
corrected_counts <- readRDS(file.path(outdir,"counts_gc_corrected.rds"))
peaks <- cbind(rowinfo, corrected_counts)
counts <- readRDS(file.path(outdir,"count_summary.rds"))
peaks <- as.data.table(assays(counts)$counts)
colnames(peaks) <- paste0('cell-', colnames(peaks))
rowinfo <- as.data.table(rowRanges(counts))
peaks <- cbind(rowinfo, peaks)
peaks <- cbind(rowinfo, corrected_counts)
zeroes_per_bin <- peaks[, rowSums(.SD==0), .SDcols = patterns("cell-")]
ncells <- length(grep("cell-", colnames(peaks)))
# Exclude bins that have no signal in most cells
peaks <- peaks[zeroes_per_bin<(threshold_blacklist_bins*ncells)]
clusters_ad <- peaks[, mclapply(.SD, function(x) {
peaksperchrom <- split(x, peaks$seqnames)
print("Calculating distance AD")
results <- lapply(peaksperchrom, function(x2) {
getbp(x2, k = k, minsize = minsize, test=test)
})
}, mc.cores = ncores), .SDcols = patterns("cell-")]
names_seq <- levels(peaks$seqnames)
clusters_ad <- readRDS(file.path(outdir,"results_gc_corrected.rds"))
breakpoints <- lapply(clusters_ad, function(x) { lapply(x,'[[', 1) })
distances <- lapply(clusters_ad, function(x) { lapply(x,'[[', 2) })
clusters_ad
peaks
results
epiAneufinder::epiAneufinder(input=input, outdir=outdir, blacklist=blacklist, windowSize=windowSize, genome=genome, exclude=exclude, reuse.existing=reuse.existing, uq=uq, lq=lq, title_karyo=title_karyo, ncores=ncores,minFrags=minFrags,minsize=minsize,k=k,threshold_blacklist_bins=threshold_blacklist_bins)
source('~/Desktop/epiAneu/epiAneufinder_wrapper.R', echo=TRUE)
source('~/Desktop/epiAneu/epiAneufinder_wrapper.R', echo=TRUE)
?plot_grid
source('~/Desktop/epiAneu/epiAneufinder_wrapper.R', echo=TRUE)
library(devtools)
source('~/Desktop/epiAneu/epiAneufinder_wrapper.R', echo=TRUE)
getwd()
devtools::load_all()
source('~/Desktop/epiAneu/epiAneufinder_wrapper.R', echo=TRUE)
outdir <- file.path(outdir, "epiAneufinder_results")
counts <- readRDS(file.path(outdir,"count_summary.rds"))
peaks <- as.data.table(assays(counts)$counts)
colnames(peaks) <- paste0('cell-', colnames(peaks))
rowinfo <- as.data.table(rowRanges(counts))
peaks <- cbind(rowinfo, peaks)
corrected_counts <- readRDS(file.path(outdir,"counts_gc_corrected.rds"))
peaks <- cbind(rowinfo, corrected_counts)
zeroes_per_bin <- peaks[, rowSums(.SD==0), .SDcols = patterns("cell-")]
ncells <- length(grep("cell-", colnames(peaks)))
# Exclude bins that have no signal in most cells
peaks <- peaks[zeroes_per_bin<(threshold_blacklist_bins*ncells)]
somies_ad <- readRDS(file.path(outdir,"cnv_calls.rds"))
qc_dt <- data.table()
qc_dt$spikiness <- sapply(peaks[, .SD, .SDcols = patterns("cell-")], qc.spikiness)
qc_dt$entropy <- sapply(peaks[, .SD, .SDcols = patterns("cell-")], qc.entropy)
qc_dt$sumsquares <- unlist(Map(function(counts,somies) {
qc.sos(counts,somies)
}, peaks[, .SD, .SDcols = patterns("cell-")], somies_ad))
# qc_dt$spikiness <- sapply(peaks[, .SD, .SDcols = patterns("cell-")], qc.spikiness)
# qc_dt$entropy <- sapply(peaks[, .SD, .SDcols = patterns("cell-")], qc.entropy)
# qc_dt$sumsquares <- unlist(Map(function(counts,somies) {
#   qc.sos(counts,somies)
# }, peaks[, .SD, .SDcols = patterns("cell-")], somies_ad))
# qc_dt$libsize <- sapply(peaks[, .SD, .SDcols = patterns("cell-")], sum)
# somies.dt <- as.data.table(somies_ad)
# # somies.dt <- as.data.table(lapply(somies.dt, function(x) {scale(x, center=TRUE, scale=TRUE)}))
# qc_dt$name <- colnames(somies.dt)
## Plotting function
somies.dt$seqnames <- peaks$seqnames
# qc_dt <- data.table()
# qc_dt$spikiness <- sapply(peaks[, .SD, .SDcols = patterns("cell-")], qc.spikiness)
# qc_dt$entropy <- sapply(peaks[, .SD, .SDcols = patterns("cell-")], qc.entropy)
# qc_dt$sumsquares <- unlist(Map(function(counts,somies) {
#   qc.sos(counts,somies)
# }, peaks[, .SD, .SDcols = patterns("cell-")], somies_ad))
# qc_dt$libsize <- sapply(peaks[, .SD, .SDcols = patterns("cell-")], sum)
somies.dt <- as.data.table(somies_ad)
# # somies.dt <- as.data.table(lapply(somies.dt, function(x) {scale(x, center=TRUE, scale=TRUE)}))
# qc_dt$name <- colnames(somies.dt)
## Plotting function
somies.dt$seqnames <- peaks$seqnames
somies.dt$rn <- as.numeric(rownames(somies.dt))
somies_melted <- melt(somies.dt, id.vars=c('rn','seqnames'))
somies_melted$value <- as.factor(paste0(somies_melted$value,'-somy'))
counts_t <- t(somies.dt[ ,.SD, .SDcols=patterns('cell-')])
if(nrow(counts_t)>1){
dist_matrix <- dist(counts_t)
dist_matrix[is.na(dist_matrix)] <- 0
hc_counts <- hclust(dist_matrix, method = "ward.D")
ord <- hc_counts$order
dhc <- stats::as.dendrogram(hc_counts)
ddata <- ggdendro::dendro_data(dhc, type = "rectangle")
ggdndr <- ggplot(ddata$segments) + geom_segment(aes_string(x='x', xend='xend', y='y', yend='yend')) + scale_y_reverse()
ggdndr <- ggdndr + coord_flip()
ggdndr <- ggdndr + theme(panel.background=element_blank(), axis.ticks=element_blank(), axis.text=element_blank(), axis.line=element_blank(), axis.title=element_blank())
somies_melted$variable <- factor(somies_melted$variable,
levels = names(somies_ad)[ord])
}
somycolours <- c(`0-somy` = "darkorchid3",
`1-somy` = "springgreen2",
`2-somy` = "red3")
# text_subtitle <- paste0("Segment lq: ", lq, "Segment uq: ", uq)
ggsomy <- ggplot(somies_melted, aes(x=rn, y=variable, fill=value)) + geom_tile() +
facet_grid(cols=vars(seqnames), scales = 'free_x', space = 'free') +
labs(x="Position in chromosome", fill='Somy', title = title_karyo) +
scale_fill_manual(values=somycolours) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = 'none',
strip.text.x = element_text(size = 14),
axis.title.y = element_blank(),
axis.text.y = element_blank())
karyoname <- paste0("Karyogram.png")
outkaryo <- file.path(outdir, karyoname)
ggsomy
ggdndr
cowplot::plot_grid(list(ggdndr, ggsomy), ncol = 2, rel_widths = c(0.2,1))
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1))
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), align = 'hv')
?plot_grid
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='b', align = 'hv')
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='br', align = 'hv')
ggdndr <- ggdndr + labs(title = "")
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='br', align = 'hv')
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='br', align = 'h')
ggdndr <- ggdndr + labs(title = "", subtitle = "")
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='br', align = 'h')
ggdndr <- ggdndr + theme(panel.background=element_blank(),
axis.ticks=element_blank(),
axis.text=element_blank(),
axis.line=element_blank(),
axis.title=element_blank(),
panel.grid.minor=element_blank())
karyoname <- paste0("Karyogram.png")
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='br', align = 'h')
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), align = 'h')
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='b', align = 'h')
# text_subtitle <- paste0("Segment lq: ", lq, "Segment uq: ", uq)
ggsomy <- ggplot(somies_melted, aes(x=rn, y=variable, fill=value)) + geom_tile() +
facet_grid(cols=vars(seqnames), scales = 'free_x', space = 'free') +
labs(x="Position in chromosome", fill='Somy', title = title_karyo) +
scale_fill_manual(values=somycolours) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = 'none',
plot.title=element_text(size=25),
strip.text.x = element_text(size = 14),
axis.title.y = element_blank(),
axis.text.y = element_blank())
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='b', align = 'h')
# text_subtitle <- paste0("Segment lq: ", lq, "Segment uq: ", uq)
ggsomy <- ggplot(somies_melted, aes(x=rn, y=variable, fill=value)) + geom_tile() +
facet_grid(cols=vars(seqnames), scales = 'free_x', space = 'free') +
labs(x="Position in chromosome", fill='Somy', title = title_karyo) +
scale_fill_manual(values=somycolours) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = 'none',
plot.title=element_text(size=18),
strip.text.x = element_text(size = 14),
axis.title.y = element_blank(),
axis.text.y = element_blank())
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='b', align = 'h')
ggdndr <- ggdndr + theme(panel.background=element_blank(),
axis.ticks=element_blank(),
axis.text=element_blank(),
axis.line=element_blank(),
axis.title=element_blank(),
panel.grid.minor=element_blank(),
plot.title = element_text(size=18),
plot.subtitle=element_text(size=14))
# text_subtitle <- paste0("Segment lq: ", lq, "Segment uq: ", uq)
ggsomy <- ggplot(somies_melted, aes(x=rn, y=variable, fill=value)) + geom_tile() +
facet_grid(cols=vars(seqnames), scales = 'free_x', space = 'free') +
labs(x="Position in chromosome", fill='Somy', title = title_karyo) +
scale_fill_manual(values=somycolours) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = 'none',
plot.title = element_text(size=18),
strip.text.x = element_text(size = 14),
axis.title.y = element_blank(),
axis.text.y = element_blank())
cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='b', align = 'h')
ddata <- ggdendro::dendro_data(dhc)#, type = "rectangle")
ggdndr <- ggplot(ddata$segments) + geom_segment(aes_string(x='x', xend='xend', y='y', yend='yend')) + scale_y_reverse()
ggdndr <- ggdndr + coord_flip() + labs(title = "", subtitle = "")
ggdndr <- ggdndr + theme(panel.background=element_blank(),
axis.ticks=element_blank(),
axis.text=element_blank(),
axis.line=element_blank(),
axis.title=element_blank(),
panel.grid.minor=element_blank(),
plot.title = element_text(size=18),
plot.subtitle=element_text(size=14))
ggdndr
# text_subtitle <- paste0("Segment lq: ", lq, "Segment uq: ", uq)
ggsomy <- ggplot(somies_melted, aes(x=rn, y=variable, fill=value)) + geom_tile() +
facet_grid(cols=vars(seqnames), scales = 'free_x', space = 'free') +
labs(x="Position in chromosome", fill='Somy', title = title_karyo) +
scale_fill_manual(values=somycolours) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
legend.position = 'none',
plot.title = element_text(size=18),
strip.text.x = element_text(size = 14),
axis.title.y = element_blank(),
axis.text.y = element_blank())
combiplot <- cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='b', align = 'h')
combiplot
ggdndr <- ggdndr + theme(panel.background=element_blank(),
axis.ticks.x=element_blank(),
axis.text=element_blank(),
axis.line=element_blank(),
axis.title=element_blank(),
panel.grid.minor=element_blank(),
plot.title = element_text(size=18),
plot.subtitle=element_text(size=14))
combiplot <- cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.2,1), axis='b', align = 'h')
combiplot
ggdndr <- ggplot(ddata$segments) + geom_segment(aes_string(x='x', xend='xend', y='y', yend='yend')) + scale_y_reverse()
ggdndr <- ggdndr + coord_flip() + labs(title = "", subtitle = "")
ggdndr <- ggdndr + theme(panel.background=element_blank(),
axis.ticks.x=element_blank(),
axis.text=element_blank(),
axis.line=element_blank(),
axis.title=element_blank(),
panel.grid.minor=element_blank(),
plot.title = element_text(size=18),
plot.subtitle=element_text(size=14))
ggdndr
# Call plotting function to plot and save karyogram
plot_karyo_gainloss(somies_ad = somies_ad, outdir = outdir, peaks = peaks, uq, lq, title_karyo)
load_all()
# Call plotting function to plot and save karyogram
plot_karyo_gainloss(somies_ad = somies_ad, outdir = outdir, peaks = peaks, uq, lq, title_karyo)
# Call plotting function to plot and save karyogram
plot_karyo_gainloss(somies_ad = somies_ad, outdir = outdir, peaks = peaks, uq, lq, title_karyo)
combiplot <- cowplot::plot_grid(ggdndr, ggsomy, ncol = 2, rel_widths = c(0.1,1), axis='b', align = 'h')
ggsave(outkaryo, combiplot, width = 36, height=20, units = "in")
load_all()
source('~/git/epiAneufinder/R/epiAneufinder_function.R', echo=TRUE)
source('~/Desktop/epiAneu/epiAneufinder_wrapper.R', echo=TRUE)
source('~/Desktop/epiAneu/epiAneufinder_wrapper.R', echo=TRUE)
list.files
list.files()
library(epiAneufinder)
#Location of the input data. Can be a single fragments tsv file of a folder containing multiple bam files
input <- "/Users/akshaya/Desktop/epiAneu/sample.tsv" #path to folder containing BAM files /or/ path+file_name for a TSV fragments file. If you want to test the package, sample data can be downloaded from the sample_data folder.
# Location of the output directory. If the directory does not exist it will be created
outdir <- "epiAneufinder_results"
#BSgenome to use for the analysis. The genome should be already installed in R. In this example we use the UCSC hg38 genome from Bioconductor
genome <- "BSgenome.Hsapiens.UCSC.hg38"
#Chromosomes to be excluded from the analysis. The chromosome names should follow the naming of the genome version used. In this example we have UCSC chromosome names
#Default is NULL
exclude <- c('chrX','chrY','chrM')
#Bed file with the blacklisted regions of the genome. This file is genome-version specific and it should be downloaded by the user
blacklist <- "/Users/akshaya/Work/hg38.blacklist.bed"
#Window size for partitioning the genome. Smaller window sizes will result in longer running times. Default is 1e5
windowSize <- 1e5
#Parameter to instruct epiAneufinder to resume from a previous run. Can be set to either True or False
#If certain parameters change, for example minsize, resuming may end in error messages. In such a case change the parameter to False
#Default in False
reuse.existing=TRUE
#Upper quantile thrshold. Default is 0.9
uq=0.9
#Lower quantile threshold. Default is at 0.1
lq=0.1
#Title for the karyotype plot. Default is NULL
title_karyo="Karyoplot"
#Number of cores to use for the analysis. Default is 4
ncores=4
#Minimum number of fragments for a cell to be included in the analysis. This parameter is only for fragnment files. Default is 20000
minFrags = 20000
#Threshold for filtering bins if the ratio of cells with zero reads is higher than the threshold. Setting it to 0 deactivates the filter. Default is 0.85
threshold_blacklist_bins=0.85
#Parameter on how many breakpoins to use for the CNV calculation. Default is 1, all breakpoints. If higher than one, the algorithm will calculate every n breakpoints
#Setting it to higher than 1 speeds the process with lower resolution as a result
minsize=5
#Number of segments per chromosomes (2^k). Default value is 3
k=3
epiAneufinder(input="sample.tsv", #Enter path to your fragments.tsv file or the folder containing bam files
outdir="epiAneufinder_results", #Path to the directory where results should be written
blacklist="blacklist.bed", #Path to bed file that contains the blacklisted regions of your genome
windowSize=1e5,
genome="BSgenome.Hsapiens.UCSC.hg38", #Substitute with relevant BSgenome
exclude=c('chrX','chrY','chrM'),
reuse.existing=TRUE,
title_karyo="Karyogram of sample data",
ncores=4,
minFrags=20000)
epiAneufinder(input=input, #Enter path to your fragments.tsv file or the folder containing bam files
outdir=outdir, #Path to the directory where results should be written
blacklist=blacklist, #Path to bed file that contains the blacklisted regions of your genome
windowSize=1e5,
genome="BSgenome.Hsapiens.UCSC.hg38", #Substitute with relevant BSgenome
exclude=c('chrX','chrY','chrM'),
reuse.existing=TRUE,
title_karyo="Karyogram of sample data",
ncores=4,
minFrags=20000)
epiAneufinder(input=input, #Enter path to your fragments.tsv file or the folder containing bam files
outdir=outdir, #Path to the directory where results should be written
blacklist=blacklist, #Path to bed file that contains the blacklisted regions of your genome
windowSize=1e5,
genome="BSgenome.Hsapiens.UCSC.hg38", #Substitute with relevant BSgenome
exclude=c('chrX','chrY','chrM'),
reuse.existing=TRUE,
title_karyo="Karyogram of sample data",
ncores=4,
minFrags=20000)
